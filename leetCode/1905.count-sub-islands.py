#
# @lc app=leetcode id=1905 lang=python3
#
# [1905] Count Sub Islands
#
from typing import List
from collections import deque


# @lc code=start
class Solution:
    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        count = 0
        grid = []
        for i in range(len(grid1)):
            grid.append([])
            for j in range(len(grid1[0])):
                if grid1[i][j] == 1 and grid2[i][j] == 1:
                    grid[i].append(2)
                elif grid1[i][j] == 1 and grid2[i][j] == 0:
                    grid[i].append(0)
                elif grid1[i][j] == 0 and grid2[i][j] == 1:
                    grid[i].append(1)
                else:
                    grid[i].append(0)
        self.visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]
        for y in range(len(grid)):
            for x in range(len(grid[0])):
                if grid[y][x] == 2:
                    count += self.bfs(grid, x, y)
        return count

    def bfs(self, grid, x, y):
        offsets = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        q = deque()
        q.append((x, y))
        ans = 1
        while q:
            x, y = q.popleft()
            if self.visited[y][x]:
                continue
            grid[y][x] = 3
            self.visited[y][x] = True
            for dx, dy in offsets:
                nx, ny = x + dx, y + dy
                if 0 <= nx < len(grid[0]) and 0 <= ny < len(grid) and not self.visited[ny][nx]:
                    if grid[ny][nx] == 2:
                        q.append((nx, ny))
                    elif grid[ny][nx] == 1:
                        ans = 0
                        q.append((nx, ny))
        return ans


# @lc code=end


def main():
    sol = Solution()
    grid1 = [[1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1],[0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0],[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1],[0,1,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0],[1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1],[0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1],[1,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1],[1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0],[1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1],[1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1],[1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1],[0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0],[1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,0,0,0,1,0,1,0,1],[1,0,1,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0],[1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0],[1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1],[1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1]]
    grid2 = [[1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0],[0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1],[0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1],[1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0],[1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0],[1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1],[1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1],[1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1],[1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1],[0,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,1,0,0],[1,1,0,1,1,1,0,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1],[1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1],[1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1],[1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1],[0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1],[1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1],[1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0,1,0,0,1,1,1,0,1],[0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1],[1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0]]

    ans = sol.countSubIslands(grid1, grid2)
    print(ans)


if __name__ == "__main__":
    main()
